/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.abc.CustomerSelfServiceSystem;
import com.abc.JDBCConnection.ConnectionClass;
import com.abc.customer_one_system.MatchFormats;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author test
 */
public class ViewPaymentHistory extends javax.swing.JFrame {

    /**
     * Creates new form ViewPaymentHistory
     */
DefaultTableModel model=null;
    public ViewPaymentHistory() {
        initComponents();
        model = (DefaultTableModel) tblHistory.getModel();
    }

   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        lblCategory = new javax.swing.JLabel();
        cbmCategory = new javax.swing.JComboBox<>();
        lblStatus = new javax.swing.JLabel();
        cbmStatus = new javax.swing.JComboBox<>();
        lblFrom = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        lblTo = new javax.swing.JLabel();
        txtTo = new javax.swing.JTextField();
        btnSubmit = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblHistory = new javax.swing.JTable();
        lblMsg = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblTitle.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        lblTitle.setText("View Payment History");

        lblCategory.setText("Category");

        cbmCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All Categories", "item1", "public" }));

        lblStatus.setText("Status");

        cbmStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Status", "Pending", "Paid", "Force Pay", "Rejected" }));

        lblFrom.setText("From");

        txtFrom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFromActionPerformed(evt);
            }
        });

        lblTo.setText("To");

        txtTo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtToActionPerformed(evt);
            }
        });

        btnSubmit.setText("Submit");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        tblHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date", "AC No", "Biller", "Amount", "Category", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblHistory);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblCategory)
                            .addComponent(lblStatus)
                            .addComponent(lblFrom))
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(45, 45, 45)
                                        .addComponent(btnSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(37, 37, 37)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnCancel)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblTo)
                                        .addGap(34, 34, 34)
                                        .addComponent(txtTo, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(27, 27, 27)
                                        .addComponent(lblMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(cbmStatus, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cbmCategory, javax.swing.GroupLayout.Alignment.LEADING, 0, 141, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(247, 247, 247)
                .addComponent(lblTitle)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(lblTitle)
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblCategory)
                    .addComponent(cbmCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStatus)
                    .addComponent(cbmStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblFrom)
                        .addComponent(txtFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblTo)
                        .addComponent(txtTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSubmit)
                    .addComponent(btnCancel))
                .addGap(37, 37, 37)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtFromActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFromActionPerformed
    //    LocalDate todaydate = LocalDate.now();
    //    txtFrom.setText(String.valueOf(todaydate.withDayOfMonth(1)));
    }//GEN-LAST:event_txtFromActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        BillPaymentMenu menu=new BillPaymentMenu();
        this.setVisible(false);
        menu.setVisible(true);
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        int rowCount = model.getRowCount();
//Remove rows one by one from the end of the table
        for (int i = rowCount - 1; i >= 0; i--) {
            model.removeRow(i);
        }
        String from=txtFrom.getText();
        String to=txtTo.getText();
        boolean flag=true;
        MatchFormats match=new MatchFormats();
        if(from.equals("") || to.equals(""))
        {
            lblMsg.setText("cannot be empty");
            flag &=false;
        }
        else if(!match.matchDate(from) )
        {
            lblMsg.setText("Invalid from format");
            flag &=false;
        }
        else if(!match.matchDate(to))
        {
            lblMsg.setText("Invalid to format");
            flag &=false;
        }
        //&& !match.verifyDuration(from,to))
        else if(!match.verifyDuration(from,to))
        {
            lblMsg.setText("Invalid to date should be after from date");
            flag &=false;
        }        
        else
        {
            lblMsg.setText("");
        }
        String cat=cbmCategory.getSelectedItem().toString();
        String stat=cbmStatus.getSelectedItem().toString();
        cat=cat.trim();
        stat=stat.trim();
        //System.out.println("cat="+cat+" stat="+stat);
        if(flag)
        {
            try
            {
                Connection con=ConnectionClass.getConnected();
                //lblMsg.setText("entered values");
                getPayment(from,to,cat,stat,con);             
            }
            catch(ClassNotFoundException | SQLException e)
            { 
                lblMsg.setText("Invalid date format");
            }
        }
    }//GEN-LAST:event_btnSubmitActionPerformed

    private void getPayment(String from,String to,String category,String status,Connection con) throws SQLException, ClassNotFoundException
    {
        ResultSet rs=null;
        //System.out.println("inside getPayment method,cat="+category+" stat="+status);
        if(category.equals("All Categories")&& status.trim().equals("Status"))
        {
            System.out.println("all categories and all status");
            String query="select m.payment_date,m.account_number,b.biller_name,m.bill_amount,b.biller_category,m.payment_status from biller b join make_payment m on b.biller_id=m.biller_id where m.payment_date between TO_DATE ('"+from+"','dd/mm/yyyy') and TO_DATE ('"+to+"','dd/mm/yyyy')";
            Statement stmt=con.createStatement();
            rs=stmt.executeQuery(query);
        }
        else if(category.equals("All Categories") && !status.trim().equals("Status"))
        {
            System.out.println("all categories and selected status");
            String query="select m.payment_date,m.account_number,b.biller_name,m.bill_amount,b.biller_category,m.payment_status from biller b join make_payment m on b.biller_id=m.biller_id where m.payment_status='"+status+"' and  m.payment_date between TO_DATE ('"+from+"','dd/mm/yyyy') and TO_DATE ('"+to+"','dd/mm/yyyy')";
            Statement stmt=con.createStatement();
            rs=stmt.executeQuery(query);            
        }
        else if(!category.equals("All Categories") && status.trim().equals("Status"))
        {
            System.out.println("selected category and all status");
            String query="select m.payment_date,m.account_number,b.biller_name,m.bill_amount,b.biller_category,m.payment_status from biller b join make_payment m on b.biller_id=m.biller_id where b.biller_category='"+category+"' and  m.payment_date between TO_DATE ('"+from+"','dd/mm/yyyy') and TO_DATE ('"+to+"','dd/mm/yyyy')";
            Statement stmt=con.createStatement();
            rs=stmt.executeQuery(query);
        }
        else
        {
            System.out.println("selected category and selected status");
            String query="select m.payment_date,m.account_number,b.biller_name,m.bill_amount,b.biller_category,m.payment_status from biller b join make_payment m on b.biller_id=m.biller_id where m.payment_status='"+status+"' and b.biller_category='"+category+"' and  m.payment_date between TO_DATE ('"+from+"','dd/mm/yyyy') and TO_DATE ('"+to+"','dd/mm/yyyy')";
            Statement stmt=con.createStatement();
            rs=stmt.executeQuery(query);
        }
        int flag=0;
        while(rs.next())
        {
            flag++;
            String date=rs.getString(1);
            String acNo=rs.getString(2);
            String biller=rs.getString(3);
            double am=rs.getDouble(4);
            String cat=rs.getString(5);
            String stat=rs.getString(6);
           // DefaultTableModel model;
           // model= (DefaultTableModel) tblHistory.getModel();
            model.addRow(new Object[]{date,acNo,biller,am,cat,stat});
            //System.out.println("inside while in getPayment method");
        }
        if(flag==0)
            lblMsg.setText("No data available");
    }
    private void txtToActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtToActionPerformed
    //    LocalDate todaydate = LocalDate.now();
    //    txtTo.setText(String.valueOf(todaydate));
    }//GEN-LAST:event_txtToActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewPaymentHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewPaymentHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewPaymentHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewPaymentHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewPaymentHistory().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JComboBox<String> cbmCategory;
    private javax.swing.JComboBox<String> cbmStatus;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCategory;
    private javax.swing.JLabel lblFrom;
    private javax.swing.JLabel lblMsg;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblTo;
    private javax.swing.JTable tblHistory;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtTo;
    // End of variables declaration//GEN-END:variables
}
